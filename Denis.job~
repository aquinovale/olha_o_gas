###### Job's para API ########
# Denis, a cada tarefa concluída, por favor, adiciona um OK 
# na frente da tarefa e faça um git push
#
# Caso deseje alterar algum retorno, faça um git push
##############################

################### WEB ####################

1 - Tela de SignIn - Momento que a empresa se cadastra
WEB envia: {cmp_fancy, cmp_site, ...} - Todos os campos da tabela tb_cmp_company e tb_res_responsible
API retorno: {re: 'OK|ERROR', token: '' }

Regra Geral: Caso seja um error, a mensagem deve estar no campo token.
Obs.: o campo cmp_id armazena o CNPJ da empresa, o campo res_id armazena o telefone do responsável (futuramente ele usara um app para controlar tudo)
Obs2.: O usr_pass deve armazenar um md5
obs3.: Ao finalizar o cadastro, ele já ficará logado, porém deve-se confirmar o email de confirmação 

Enviar os dados para este ENDPOINT: /companySignIn



2 - Tela LogIn - responsaveis
WEB envia: {res_user, res_pass}
API retorno: {re: 'OK|ERROR', token: ''}

Enviar os dados para este ENDPOIND: /logIn


3 - Cadastro/Manutencao dos responsaveis, ou seja, usuario que acessarão o site para visualizar os pedidos
WEB envia: {token, cmp_id, res_id, res_name, res_gender, res_user, res_pass, res_active}
API retorno: {re: 'OK|ERROR', token: ''}

Obs.: Deve existir pelo menos um responsavel, que deverá ser cadastrado no momento do cadastro da empresa

Enviar os dados para este ENDPOINT: /responsibleSignIn


4 - Cadastro/Manutenção dos motoristas
WEB envia: {token, cmp_id, dri_id, dri_name, dri_active}
API retorno: {re: 'OK|ERROR', token: ''}

Obs.: dri_id é o telefone do motorista (futuramente haverá uma app para ele)

Enviar os dados para este ENDPOINT: /driversSignIn

5 - Cadastro/Manutencao dos veiculos
WEB envia: {token, cmp_id, veh_id, veh_active}
API retorno: {re: 'OK|ERROR', token: ''}

Obs.: veh_id é a placa do veiculo (Serve somente para vincular uma entrega a um motorista, futuramente a ideia é automatizar todo o redirecionamento de entregas)

Enviar os dados para este ENDPOINT: /vehicleSignIn

6 - Cadastro/Manutencao Produtos -
WEB envia: {token, cmp_id, prod_id, cmp_pro_name, cmp_pro_price, cmp_pro_weight, cmp_pro_type_weight, cmp_pro_active} 
API retorno: {re: 'OK|ERROR', token: ''}

Obs.: Os produtos já estão cadastrados, a empresa deve somente definir quais tipos de produtos ela trabalha.
Usar o ENDPOINT: /public/products, API retorna: {re : 'OK|ERROR', products: [{prod_id, pro_name, pro_icon}, {prod_id, pro_name, pro_icon}]}

Obs2.: Não de deve deixar excluir nenhum produto, deve-se alterar somente o campo cmp_pro_active para FALSE.

Enviar os dados para este ENDPOINT: /productsSignIn

7 - Cadastro/Manutencao Forma de Pagamento
WEB envia: {token, cmp_id, pay_id, cmp_pay_active}
API retorno: {re: 'OK|ERROR', token: ''}

Obs.: Os pagamentos já estão cadastrados, a empresa deve somente definir quais ela trabalha
Usar o ENDPOINT: /public/payments, API retorna: {re: 'OK|ERROR', payments: [{pay_id, pay_name}]}


Enviar os dados para este ENDPOINT: /paymentSignIn

8 - Lista motoristas da empresa
WEB envia: {token}
API retorna: {re: 'OK|ERROR', drivers: [{dri_id, dri_name, dri_active}]}

ENDPOINT: /driversCompany


8 - Lista veículos das empresas
WEB envia: {token}
API retorna: {re: 'OK|ERROR', vehicles: [{veh_id, veh_active}]}

ENDPOINT: /vehiclesCompany


9 - lista responsaveis da empresas
WEB envia: {token}
API retorno: {re: 'OK|ERROR', responsibles : {res_id, res_name, res_gender, res_user, res_pass, res_active}}

ENDPOINT: /responsiblesCompany


10 - Lista Produtos das empresa

WEB envia: {token}
API retorna: {re : 'OK|ERROR', products: [{cmp_id, prod_id, cmp_pro_name, cmp_pro_price, cmp_pro_weight, cmp_pro_type_weight, cmp_pro_active}]}


ENDPOINT: /productsCompany


11 - Lista Formas de Pagamentos das empresas
WEB envia: {token}
API retorna: {re: 'OK|ERROR', payments: [{pay_id, pay_name, cmp_pay_active}]}

ENDPOINT: /productsCompany



12 - Visualiza Pedidos
WEB envia: {token}
API retorno: {re : 'OK|ERROR', token: '', orders: [{payment, usr_id, usr_name, bus_id, location, dri_id, driver, veh_id, vehicle, geohash, amount, del_status}, {payment, usr_id, usr_name, bus_id, location, dri_id, driver, veh_id, vehicle, geohash, amount, del_status}]}

Obs.: O campo del_status que define o status de entrega do produto.

0 - enviado, 1 - direcionado, 2 - entregue, 3 - voltou, 4- cancelado, 5 - removido






















ENDPOINT: /showOrders

9 - Recebe/Modifica pedidos
WEB envia: {token, usr_id, bus_id, dri_id, veh_id, del_status}
API retorno: {re : 'OK|ERROR', token: ''}

IMPORTANTE: Usar a vw_update_order(cmp_id, usr_id, bus_id, dri_id, veh_id, del_status) que deverá ser usada para executar as regras de negócio.

ENDPOINT: /updateOrders

10 - Mostra Items dos pedidos
WEB envia: {token, usr_id, bus_id}
API retorno: {re: 'OK|ERROR', token: '', items: [{pro_id, ord_qtde, ord_price}, {pro_id, ord_qtde, ord_price}]}


IMPORTANTE: Usar a vw_show_itens(cmp_id, usr_id, bus_id) que deverá ser usada para executar as regras de negócio.

ENDPOINT: /showItens



